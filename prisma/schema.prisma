generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  password      String?
  image         String?
  tasks         Task[]
  projects      Project[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  ActivityLog ActivityLog[]
  Note        Note[]
}

model Session {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model Task {
  id          String       @id @default(cuid()) @map("_id")
  title       String
  description String?
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(NORMAL)
  dueDate     DateTime?
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project?     @relation(fields: [projectId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Note {
  id        String   @id @default(cuid()) @map("_id")
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String       @id @default(cuid()) @map("_id")
  projectName String
  description String?
  dueDate     DateTime
  priority    TaskPriority @default(LOW)
  status      Status
  ownerId     String
  owner       User         @relation(fields: [ownerId], references: [id])
  tasks       Task[]
  createdAt   DateTime     @default(now())
}

model ActivityLog {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  action     String
  entityId   String
  entityType String
  timestamp  DateTime @default(now())
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}
